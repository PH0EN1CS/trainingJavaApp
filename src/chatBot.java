import java.io.*;
import java.util.*;

public class chatBot {

        static boolean run = true;
        static Scanner console = new Scanner(System.in);

        // –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
        static Map<String, List<String>> answers = new HashMap<>();

        public static void chat() {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            try {
                loadAnswers();
            } catch (IOException e) {
                System.out.println("‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: " + e.getMessage());
            }

            System.out.println("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞.");

            while (run) {
                System.out.print("–í—ã: ");
                String userMessage = console.nextLine().trim().toLowerCase();
                botAnswer(userMessage);
            }
        }

        private static void botAnswer(String userMessage) {
            if (userMessage.equals("exit")) {
                System.out.println("–ë–æ—Ç: –ü–æ–∫–∞ üëã");
                run = false;
                return;
            }

            if (answers.containsKey(userMessage)) {
                List<String> responses = answers.get(userMessage);
                Random rand = new Random();
                String randomAnswer = responses.get(rand.nextInt(responses.size()));
                System.out.println("–ë–æ—Ç: " + randomAnswer);
            } else {
                System.out.println("–ë–æ—Ç: –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üòÖ");
                System.out.print("üëâ –ß—Ç–æ –º–Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ '" + userMessage + "'? ");
                String newAnswer = console.nextLine();

                // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
                answers.put(userMessage, new ArrayList<>(List.of(newAnswer)));

                // –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                saveAnswer(userMessage, newAnswer);

                System.out.println("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –∑–∞–ø–æ–º–Ω–∏–ª.");
            }
        }

        private static void loadAnswers() throws IOException {
            File file = new File("answers.txt");
            if (!file.exists()) {
                System.out.println("‚ö† –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...");
                file.createNewFile();
                return;
            }

            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.contains("=")) {
                        String[] parts = line.split("=");

                        // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –∫–ª—é—á (—Ñ—Ä–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                        String key = parts[0].toLowerCase();

                        // –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                        List<String> responses = new ArrayList<>(Arrays.asList(parts).subList(1, parts.length));

                        answers.put(key, responses);
                    }
                }
                System.out.println("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ " + answers.size() + " —Ñ—Ä–∞–∑ –∏–∑ " + "answers.txt");
            }
        }

        private static void saveAnswer(String key, String value) {
            try (FileWriter writer = new FileWriter("answers.txt", true)) {
                writer.write(key + "=" + value + "\n");
            } catch (IOException e) {
                System.out.println("‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + e.getMessage());
            }
        }

        public static void main(String[] args) {
            chat();
        }
    }


