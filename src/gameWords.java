import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class gameWords {
    // –£–±—Ä–∞–ª–∏ static run - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    static Scanner console = new Scanner(System.in);
    static List<String> words = new ArrayList<>();
    static String userInputWord = "";
    static String word = "";
    static int userScore = 0;
    static int botScore = 0;
    static StringBuilder progress;
    static int tryCount = 7;

    public static void guessWord() {
        boolean gameRunning = true; // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∏–≥—Ä—ã

        try {
            loadWords("words.txt");
        } catch (IOException e) {
            System.out.println(e.getMessage());
            return;
        }

        while(gameRunning) {
            System.out.print("1) exit-–≤—ã–π—Ç–∏\n2) —Å–¥–∞—Ç—å—Å—è\n –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ –±–æ—Ç–æ–º: ");
            userInputWord = console.nextLine().trim().toLowerCase();
            gameRunning = CheckInput(userInputWord); // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã
        }
    }

    private static String changeWord() {
        tryCount = 7;
        Random rand = new Random();
        String randomWord = words.get(rand.nextInt(words.size()));
        progress = new StringBuilder("_".repeat(randomWord.length()));
        return randomWord;
    }

    public static boolean CheckInput(String userInputWord) {
        boolean found = false;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if (userInputWord.equalsIgnoreCase("exit") || userInputWord.equalsIgnoreCase("1")) {
            System.out.println("–ë–æ—Ç: –ü–æ–∫–∞ üëã");
            return false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        }
        else if (userInputWord.equalsIgnoreCase("—Å–¥–∞—Ç—å—Å—è") || userInputWord.equalsIgnoreCase("2")) {
            System.out.println("–í—ã —Å–¥–∞–ª–∏—Å—å –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–ª");
            botScore++;
            startNewRound(); // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
            return true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        if (userInputWord.equalsIgnoreCase(word)) {
            System.out.println("–í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ!!!");
            userScore++;
            startNewRound(); // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–π –±—É–∫–≤—ã
        else if (userInputWord.length() == 1) {
            char guess = userInputWord.charAt(0);
            for (int i = 0; i < word.length(); i++) {
                if (word.charAt(i) == guess && progress.charAt(i) == '_') {
                    progress.setCharAt(i, guess);
                    found = true;
                }
            }

            if (found) {
                System.out.println("–£–≥–∞–¥–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: " + progress);
                if (progress.toString().equals(word)) {
                    System.out.println("–í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é!!!");
                    userScore++;
                    startNewRound();
                }
            } else {
                tryCount--;
                System.out.println("–¢–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ = " + tryCount);
            }
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞
        else if (userInputWord.length() > 1 && userInputWord.length() <= word.length()) {
            for (int i = 0; i < userInputWord.length(); i++) {
                char currentChar = userInputWord.charAt(i);
                for(int j = 0; j < word.length(); j++) {
                    if (currentChar == word.charAt(j) && progress.charAt(j) == '_') {
                        progress.setCharAt(j, currentChar);
                        found = true;
                    }
                }
            }
            tryCount--;
            if (found) {
                System.out.println("–£–≥–∞–¥–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: " + progress);
                if (progress.toString().equals(word)) {
                    System.out.println("–í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é!!!");
                    userScore++;
                    startNewRound();
                }
            } else {
                tryCount--;
                System.out.println("–ë—É–∫–≤—ã –Ω–µ —Å–æ–≤–ø–∞–ª–∏ –≤ —ç—Ç–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ = " + tryCount);
            }
        }
        // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        else {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –±—É–∫–≤—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º.");
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫
        if(tryCount <= 0) {
            System.out.println("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: " + word);
            botScore++;
            startNewRound();
        }

        return true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
    }

    private static void startNewRound() {
        word = changeWord();
        System.out.println("\n=================================");
        System.out.println("–í–∞—à —Ä–µ–∫–æ—Ä–¥: " + userScore + "\n–†–µ–∫–æ—Ä–¥ –±–æ—Ç–∞: " + botScore);
        System.out.println("–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ: " + progress);
        System.out.println("=================================\n");
    }

    private static void loadWords(String fileName) throws IOException {
        File file = new File(fileName);

        if(!file.exists()) {
            System.out.println("–§–∞–π–ª-—Å–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.");
            file.createNewFile();
            return;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String trimmed = line.trim().toLowerCase();
                if (!trimmed.isEmpty()) {
                    words.add(trimmed);
                }
            }

            if (!words.isEmpty()) {
                word = changeWord();
                System.out.println("–í–∞—à —Ä–µ–∫–æ—Ä–¥: " + userScore + "\n–†–µ–∫–æ—Ä–¥ –±–æ—Ç–∞: " + botScore);
                System.out.println("–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ: " + progress);
            } else {
                System.out.println("–§–∞–π–ª words.txt –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.");
            }
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }
}